<?xml version="1.0" encoding="UTF-8"?>

<!-- monitorInterval: Automatic Reconfiguration 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s -->
<Configuration status="OFF" monitorInterval="30">
    <Properties>
        <Property name="log-file">logs/file-test.log</Property>
    </Properties>

    <!-- ThresholdFilter
            This filter returns the onMatch result if the level in the LogEvent is the same or more specific than the configured level and the onMismatch value otherwise.
            level: String
                A valid Level name to match on. 
            onMatch: String
                Action to take when the filter matches. May be ACCEPT, DENY or NEUTRAL. The default value is NEUTRAL.
            onMismatch: String
                Action to take when the filter does not match. May be ACCEPT, DENY or NEUTRAL. The default value is DENY.
         TimeFilter
            The time filter can be used to restrict filter to only a certain portion of the day. 
            start: String
                A time in HH:mm:ss format. 
            end: String
                A time in HH:mm:ss format. Specifying an end time less than the start time will result in no log entries being written. 
            timezone: String
     -->
    <Appenders>
        <!-- Console
            filter: Filter
                A Filter to determine if the event should be handled by this Appender. 
                More than one Filter may be used by using a CompositeFilter.
            layout: Layout
                The Layout to use to format the LogEvent. If no layout is supplied the default pattern layout of 
                "%m%n" will be used.
            follow: boolean
                Identifies whether the appender honors reassignments of System.out or System.err via 
                System.setOut or System.setErr made after configuration. 
                Note that the follow attribute cannot be used with Jansi on Windows. Cannot be used with direct.
            direct: boolean
                Write directly to java.io.FileDescriptor and bypass java.lang.System.out/.err. 
                Can give up to 10x performance boost when the output is redirected to file or other process. 
                Cannot be used with Jansi on Windows. Cannot be used with follow. 
                Output will not respect java.lang.System.setOut()/.setErr() and may get intertwined with 
                other output to java.lang.System.out/.err in a multi-threaded application. New since 2.6.2. Be aware 
                that this is a new addition, and it has only been tested with Oracle JVM on Linux and Windows so far.
            name: String
                The name of the Appender.
            ignoreExceptions: boolean
                The default is true, causing exceptions encountered while appending events to be internally logged and then ignored.
            target: String
                Either "SYSTEM_OUT" or "SYSTEM_ERR". The default is "SYSTEM_OUT".
         -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout
                pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%L] %-5level %logger{36} - %msg%n" />
        </Console>
        <!-- File
            append: boolean
                When true - the default, records will be appended to the end of the file.
            bufferedIO: boolean
                When true - the default, records will be written to a buffer and the data will
                be written to disk when the buffer is full or, if immediateFlush is set, when the record is written.
            bufferSize: int
                When bufferedIO is true, this is the buffer size, the default is 8192 bytes.
            createOnDemand: boolean
                The appender creates the file on-demand. The appender only creates the file when a log event 
                passes all filters and is routed to this appender. Defaults to false.
            filter: Filter
                A Filter to determine if the event should be handled by this Appender. 
                More than one Filter may be used by using a CompositeFilter.
            fileName: String
                The name of the file to write to. If the file, or any of its parent directories, do not exist, 
                they will be created.
            immediateFlush: boolean
                When set to true - the default, each write will be followed by a flush. 
                This will guarantee the data is written to disk but could impact performance.
            layout: Layout
                The Layout to use to format the LogEvent. If no layout is supplied the default pattern layout of 
                "%m%n" will be used.
            locking: boolean
                When set to true, I/O operations will occur only while the file lock is held allowing FileAppenders 
                in multiple JVMs and potentially multiple hosts to write to the same file simultaneously. 
                This will significantly impact performance so should be used carefully.
            name: String
                The name of the Appender.
            ignoreExceptions: boolean
                The default is true, causing exceptions encountered while appending events to be internally logged and then ignored.
            filePermissions: String
                File attribute permissions in POSIX format to apply whenever the file is created.
            fileOwner: String
                File owner to define whenever the file is created.
            fileGroup: String
                File group to define whenever the file is created.
        -->
        <File name="File" fileName="${log-file}" append="true">
            <PatternLayout
                pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%L] %-5level %logger{36} - %msg%n" />
        </File>
        <!-- RollingFile
            append: boolean
            bufferedIO: boolean
            bufferSize: int
            createOnDemand: boolean
            filter: Filter
            fileName: String
            filePattern: String
                The pattern of the file name of the archived log file. The format of the pattern is dependent on 
                the RolloverPolicy that is used. The DefaultRolloverPolicy will accept both a date/time pattern compatible 
                with SimpleDateFormat and/or a %i which represents an integer counter. 
                The pattern also supports interpolation at runtime so any of the Lookups (such as the DateLookup) can be included in the pattern.
            immediateFlush: boolean
            layout: Layout
            name: String
            policy: TriggeringPolicy
                The policy to use to determine if a rollover should occur.
            strategy: RolloverStrategy
                The strategy to use to determine the name and location of the archive file.
            ignoreExceptions: boolean
            filePermissions: String
            fileOwner: String
            fileGroup: String
         -->
         <!-- Triggering Policies
            Composite Triggering Policy: 
                The CompositeTriggeringPolicy combines multiple triggering policies and returns true if any of the configured policies return true. 
                The CompositeTriggeringPolicy is configured simply by wrapping other policies in a Policies element.
            CronTriggeringPolicy: <CronTriggeringPolicy schedule="0 0 * * * ?"/>
                The CronTriggeringPolicy triggers rollover based on a cron expression.
                schedule: String 
                    The cron expression
                evaluateOnStartup: boolean
                    On startup the cron expression will be evaluated against the file's last modification timestamp. 
                    If the cron expression indicates a rollover should have occurred between that time and the current time the file will be immediately rolled over.
            OnStartupTriggeringPolicy: <OnStartupTriggeringPolicy />
                The OnStartupTriggeringPolicy policy causes a rollover if the log file is older than the current JVM's start time and the minimum file size is met or exceeded. 
                minSize: long
                    The minimum size the file must have to roll over. A size of zero will cause a roll over no matter what the file size is. 
                    The default value is 1, which will prevent rolling over an empty file.
            SizeBasedTriggeringPolicy: <SizeBasedTriggeringPolicy size="1 KB"/>
                The SizeBasedTriggeringPolicy causes a rollover once the file has reached the specified size. 
                The size can be specified in bytes, with the suffix KB, MB or GB, for example 20MB. When combined with a time based triggering policy 
                the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change. 
                When used without a time based triggering policy the SizeBased Triggering Policy will cause the timestamp value to change. 
            TimeBasedTriggeringPolicy: <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
                The TimeBasedTriggeringPolicy causes a rollover once the date/time pattern no longer applies to the active file. 
                This policy accepts an interval attribute which indicates how frequently the rollover should occur based on the time pattern and a modulate boolean attribute. 
                interval: integer
                    How often a rollover should occur based on the most specific time unit in the date pattern. 
                modulate: boolean
                    Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                    For example, if the item is hours, the current hour is 3 am and the interval is 4 then the first rollover will occur at 4 am and then next ones will occur at 8 am, noon, 4pm, etc.
                maxRandomDelay: integer
                    Indicates the maximum number of seconds to randomly delay a rollover. 
                    By default, this is 0 which indicates no delay. This setting is useful on servers where multiple applications are configured to rollover log files at the same time and can spread the load of doing so across time.
          -->
          <!-- Rollover Strategies
                DefaultRolloverStrategy: 
                    fileIndex: String
                        If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above.
                        as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files. 
                    min: integer
                        The minimum value of the counter. The default value is 1.
                    max: integer
                        The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers. The default value is 7.
                    compressionLevel: integer
                        Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files. 
                    tempCompressedFilePattern: String
                        The pattern of the file name of the archived log file during compression.
                DirectWriteRolloverStrategy: 
                    The DirectWriteRolloverStrategy causes log events to be written directly to files represented by the file pattern. With this strategy file renames are not performed. If the size-based triggering policy causes multiple files to be written during the specified time period they will be numbered starting at one and continually incremented until a time-based rollover occurs. 
                    maxFiles: String
                        The maximum number of files to allow in the time period matching the file pattern. 
                        If the number of files is exceeded the oldest file will be deleted. If specified, the value must be greater than 1. If the value is less than zero or omitted then the number of files will not be limited.
                    compressionLevel: integer
                    tempCompressedFilePattern: String
            -->
        <RollingFile name="RollingFile-1" fileName="logs/rolling-file-test-1.log"
                 filePattern="logs/RollingFile-1/$${date:yyyy-MM}/rolling-file-test-%d{yyyy-MM-dd}-%i.log.zip">
            <PatternLayout>
                <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="1 KB"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="15" min="1"/>
            <TimeFilter start="17:00:00" end="18:30:00" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>
        <RollingFile name="RollingFile-2" 
                 filePattern="logs/RollingFile-2/$${date:yyyy-MM}/rolling-file-test-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout>
                <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="1 KB"/>
            </Policies>
            <DirectWriteRolloverStrategy />
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>
    </Appenders>
    
    <Loggers>
        <Root level="trace">
            <AppenderRef ref="Console" />
            <AppenderRef ref="File" />
            <AppenderRef ref="RollingFile-1" />
        </Root>
        <!-- additivity: event whether passed to parent logger -->
        <Logger name="bullet.foo.Bar" level="all" additivity="false">
            <AppenderRef ref="Console" />
            <AppenderRef ref="RollingFile-2" />
        </Logger>
    </Loggers>
</Configuration>